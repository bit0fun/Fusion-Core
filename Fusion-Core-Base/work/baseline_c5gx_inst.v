// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.


// Generated by Quartus Prime Version 15.1 (Build Build 185 10/21/2015)
// Created on Wed Mar 22 20:18:49 2017

baseline_c5gx baseline_c5gx_inst
(
	.ADC_CONVST(ADC_CONVST_sig) ,	// output  ADC_CONVST_sig
	.ADC_SCK(ADC_SCK_sig) ,	// output  ADC_SCK_sig
	.ADC_SDI(ADC_SDI_sig) ,	// output  ADC_SDI_sig
	.ADC_SDO(ADC_SDO_sig) ,	// input  ADC_SDO_sig
	.AUD_ADCDAT(AUD_ADCDAT_sig) ,	// input  AUD_ADCDAT_sig
	.AUD_ADCLRCK(AUD_ADCLRCK_sig) ,	// inout  AUD_ADCLRCK_sig
	.AUD_BCLK(AUD_BCLK_sig) ,	// inout  AUD_BCLK_sig
	.AUD_DACDAT(AUD_DACDAT_sig) ,	// output  AUD_DACDAT_sig
	.AUD_DACLRCK(AUD_DACLRCK_sig) ,	// inout  AUD_DACLRCK_sig
	.AUD_XCK(AUD_XCK_sig) ,	// output  AUD_XCK_sig
	.CLOCK_125_p(CLOCK_125_p_sig) ,	// input  CLOCK_125_p_sig
	.CLOCK_50_B5B(CLOCK_50_B5B_sig) ,	// input  CLOCK_50_B5B_sig
	.CLOCK_50_B6A(CLOCK_50_B6A_sig) ,	// input  CLOCK_50_B6A_sig
	.CLOCK_50_B7A(CLOCK_50_B7A_sig) ,	// input  CLOCK_50_B7A_sig
	.CLOCK_50_B8A(CLOCK_50_B8A_sig) ,	// input  CLOCK_50_B8A_sig
	.CPU_RESET_n(CPU_RESET_n_sig) ,	// input  CPU_RESET_n_sig
	.HEX2(HEX2_sig) ,	// output [6:0] HEX2_sig
	.HEX3(HEX3_sig) ,	// output [6:0] HEX3_sig
	.HDMI_TX_CLK(HDMI_TX_CLK_sig) ,	// output  HDMI_TX_CLK_sig
	.HDMI_TX_D(HDMI_TX_D_sig) ,	// output [23:0] HDMI_TX_D_sig
	.HDMI_TX_DE(HDMI_TX_DE_sig) ,	// output  HDMI_TX_DE_sig
	.HDMI_TX_HS(HDMI_TX_HS_sig) ,	// output  HDMI_TX_HS_sig
	.HDMI_TX_INT(HDMI_TX_INT_sig) ,	// input  HDMI_TX_INT_sig
	.HDMI_TX_VS(HDMI_TX_VS_sig) ,	// output  HDMI_TX_VS_sig
	.HEX0(HEX0_sig) ,	// output [6:0] HEX0_sig
	.HEX1(HEX1_sig) ,	// output [6:0] HEX1_sig
	.HSMC_CLKIN0(HSMC_CLKIN0_sig) ,	// input  HSMC_CLKIN0_sig
	.HSMC_CLKIN_n(HSMC_CLKIN_n_sig) ,	// input [2:1] HSMC_CLKIN_n_sig
	.HSMC_CLKIN_p(HSMC_CLKIN_p_sig) ,	// input [2:1] HSMC_CLKIN_p_sig
	.HSMC_CLKOUT0(HSMC_CLKOUT0_sig) ,	// output  HSMC_CLKOUT0_sig
	.HSMC_CLKOUT_n(HSMC_CLKOUT_n_sig) ,	// output [2:1] HSMC_CLKOUT_n_sig
	.HSMC_CLKOUT_p(HSMC_CLKOUT_p_sig) ,	// output [2:1] HSMC_CLKOUT_p_sig
	.HSMC_D(HSMC_D_sig) ,	// inout [3:0] HSMC_D_sig
	.HSMC_RX_n(HSMC_RX_n_sig) ,	// inout [16:0] HSMC_RX_n_sig
	.HSMC_RX_p(HSMC_RX_p_sig) ,	// inout [16:0] HSMC_RX_p_sig
	.HSMC_TX_n(HSMC_TX_n_sig) ,	// inout [16:0] HSMC_TX_n_sig
	.HSMC_TX_p(HSMC_TX_p_sig) ,	// inout [16:0] HSMC_TX_p_sig
	.I2C_SCL(I2C_SCL_sig) ,	// output  I2C_SCL_sig
	.I2C_SDA(I2C_SDA_sig) ,	// inout  I2C_SDA_sig
	.KEY(KEY_sig) ,	// input [3:0] KEY_sig
	.LEDG(LEDG_sig) ,	// output [7:0] LEDG_sig
	.LEDR(LEDR_sig) ,	// output [9:0] LEDR_sig
	.SD_CLK(SD_CLK_sig) ,	// output  SD_CLK_sig
	.SD_CMD(SD_CMD_sig) ,	// inout  SD_CMD_sig
	.SD_DAT(SD_DAT_sig) ,	// inout [3:0] SD_DAT_sig
	.SRAM_A(SRAM_A_sig) ,	// output [17:0] SRAM_A_sig
	.SRAM_CE_n(SRAM_CE_n_sig) ,	// output  SRAM_CE_n_sig
	.SRAM_D(SRAM_D_sig) ,	// inout [15:0] SRAM_D_sig
	.SRAM_LB_n(SRAM_LB_n_sig) ,	// output  SRAM_LB_n_sig
	.SRAM_OE_n(SRAM_OE_n_sig) ,	// output  SRAM_OE_n_sig
	.SRAM_UB_n(SRAM_UB_n_sig) ,	// output  SRAM_UB_n_sig
	.SRAM_WE_n(SRAM_WE_n_sig) ,	// output  SRAM_WE_n_sig
	.SW(SW_sig) ,	// input [9:0] SW_sig
	.UART_RX(UART_RX_sig) ,	// input  UART_RX_sig
	.UART_TX(UART_TX_sig) 	// output  UART_TX_sig
);

